{"version":3,"sources":["components/SingleResult.js","components/ResultList.js","App.js","registerServiceWorker.js","index.js"],"names":["SingleResult","props","react_default","a","createElement","href","url","target","className","title","dangerouslySetInnerHTML","__html","desc","ResultList","_","map","results","res","idx","components_SingleResult","key","snippet","App","_useState","useState","_useState2","Object","slicedToArray","searchField","handleSearchField","_useState3","_useState4","searchValue","handleSearchValue","_useState5","_useState6","handleResults","handleSearch","searchTerm","fetch","concat","then","json","result","query","search","error","console","log","TextField_default","hintText","inputStyle","color","hintStyle","onChange","e","value","bind","this","onSubmit","MuiThemeProvider_default","src","alt","FloatingActionButton_default","onClick","SearchWebIcon_default","components_ResultList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ca3dcbec.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SingleResult(props) {\n  return (\n    // eslint-disable-next-line\n    <a href={props.url} target=\"_blank\">\n        <div className='single-result'>\n            <h3>{props.title}</h3>\n            <div dangerouslySetInnerHTML={{__html: props.desc}}>\n            </div>\n        </div>\n    </a>\n  );\n}\n\nexport default SingleResult;\n","import React from 'react';\nimport SingleResult from './SingleResult';\nimport _ from 'lodash';\n\nfunction ResultList(props) {\n  return (\n    <div className=\"result-list\">\n      {_.map(props.results, (res, idx) => {\n        return <SingleResult key={idx} title={res.title} desc={res.snippet} />\n      })}\n    </div>\n  );\n}\n\nexport default ResultList;\n","import React, { useState } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport './App.css';\nimport FloatingActionButton from 'material-ui/FloatingActionButton';\nimport TextField from 'material-ui/TextField';\nimport SearchWebIcon from 'mdi-react/SearchWebIcon';\nimport ResultList from './components/ResultList';\n\nfunction App(props) {\n  let [searchField, handleSearchField] = useState(false);\n  let [searchValue, handleSearchValue] = useState('');\n  let [results, handleResults] = useState([]);\n\n  function onSearch() {\n    let val = searchValue\n    if(val !== '') {\n      handleSearch(val)\n    } else {\n      handleSearchField(!searchField)\n    }\n  }\n\n  function onSearchText(e) {\n    handleSearchValue(e.target.value)\n    handleSearch(e.target.value)\n  }\n\n  function handleSearch(searchTerm) {\n    fetch(`https://cors.io/?http://en.wikipedia.org/w/api.php?origin=*&action=query&list=search&srsearch=${searchTerm}&format=json`)\n    .then(res => res.json())\n    .then(\n      (result) => {\n        handleResults(result.query.search)\n      },\n      (error) => {\n        console.log(error)\n      }\n    )\n  }\n\n  var search = searchField ? <TextField className='App-search'\n      hintText=\"Type to search Wikipedia..\"\n      inputStyle={{color: '#FFF'}}\n      hintStyle={{color: '#FFF'}}\n      onChange={onSearchText.bind(this)}\n      onSubmit={handleSearch.bind(this, searchValue)}\n      value={searchValue}\n    /> : null;\n\n    return (\n      <MuiThemeProvider>\n        <div className=\"App\">\n          <div className=\"App-header\">\n            <img src=\"https://dczii.github.io/images/logo-white.png\" className=\"App-logo\" alt=\"logo\" />\n          </div>\n          <div className=\"App-body\">\n            <div>\n              <FloatingActionButton onClick={() => onSearch()}>\n                <SearchWebIcon /> \n              </FloatingActionButton>\n            </div>\n            <div>\n                {search}\n            </div>\n            {results ? \n              <ResultList results={results}/>\n            : '' }\n          </div>\n          <div className=\"footer\">\n            Design and Codes by <a href=\"https://dczii.github.io/\">DcZII</a>\n          </div>\n        </div>\n      </MuiThemeProvider>\n    );\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'animate.css/animate.css' \n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}